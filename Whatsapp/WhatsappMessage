package com.example.learningapplication

import android.content.Intent
import android.content.pm.PackageManager
import android.database.Cursor
import android.net.Uri
import android.os.Build
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.provider.ContactsContract
import android.view.KeyEvent
import android.view.View
import android.widget.*
import androidx.core.database.getLongOrNull
import java.util.jar.Manifest

class WhatsappMessage : AppCompatActivity() {

    private lateinit var editTextMessage: EditText
    private lateinit var editTextPhone: EditText
    private lateinit var editTextSearch: EditText
    private lateinit var listViewContacts: ListView

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_whatsapp_message)

        // Buttons
        val btnSend = findViewById<Button>(R.id.btn_send)
        val btnPick = findViewById<Button>(R.id.btn_pickContact)
        val btnSearchContact = findViewById<Button>(R.id.btn_searchContact)

        // EditText
        editTextPhone = findViewById(R.id.editText_phone)
        editTextMessage = findViewById(R.id.editText_message)
        editTextSearch = findViewById(R.id.editText_search)

        // ListView
        listViewContacts = findViewById(R.id.listView_Contacts)

        // Arrays
        var contactsArray: MutableList<String> = arrayListOf()
        var filteredContactList: ArrayList<String> = arrayListOf()

        editTextPhone.setText("")
        editTextSearch.setText("")
        editTextMessage.setText("")

        // when clicked on item in list
        listViewContacts.setOnItemClickListener { parent, view, position, id ->

            editTextPhone.setText("")
            // get contact number
            var element: String = if (editTextSearch.text.isEmpty())
                contactsArray[position].split(',')[1]
            else
                filteredContactList[0].split(',')[1]
            println("element: $element")

            // some number are start with 0 and some with +972
            // so we need that the final number will be with +972
            var number: String = if (element[0] == '0')
                "+972"
                else
                    "+"
            for (i in 1 until element.length) {
                if (!element[i].isDigit())
                    continue
                else
                    number += element[i]
            }
            println(number)
            editTextPhone.setText(number)
        }

        btnSearchContact.setOnClickListener {

            if (contactsArray.isEmpty())
                contactsArray = readContacts()

            val name = editTextSearch.text.toString()
            var newContactList: ArrayList<String> = arrayListOf()

            for (i in contactsArray){
                // check if there is copies of contacts
                if ((name in i) && (name !in newContactList))
                    newContactList.add(i)
            }
            filteredContactList = newContactList
            listViewContacts.adapter = MyAdapter(this, R.layout.listview_row, newContactList)

        }

        btnPick.setOnClickListener {
            contactsArray = readContacts()
            printContactsList(contactsArray)
        }

        btnSend.setOnClickListener {
            val phone = editTextPhone.text.toString()
            val txt = editTextMessage.text

            println("phone: $phone")
            if (checkPhoneNumber(phone)) {
                val intent = Intent(
                    Intent.ACTION_VIEW,
                    Uri.parse("http://api.whatsapp.com/send?phone=$phone&text=$txt")
                )
                startActivity(intent)
            }
            else
                Toast.makeText(this, "Phone number not valid", Toast.LENGTH_LONG).show()
        }
    }

    private fun readContacts(): MutableList<String>{

        val contactList: MutableList<String> = ArrayList()
        val listOfNames: MutableList<String> = ArrayList()
        var cursor : Cursor? = contentResolver.query(ContactsContract.CommonDataKinds.Phone.CONTENT_URI, null, null, null, null)
        if (cursor != null) {
            while (cursor.moveToNext()) {
                val name = cursor.getString(cursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME))
                val number = cursor.getString(cursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER))
                if (number.contains('-') || (name in listOfNames))
                    continue
                else {
                    contactList.add("$name,$number")
                    listOfNames.add(name)
                }
            }
        }

        /*
        var from  = arrayOf(ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME, ContactsContract.CommonDataKinds.Phone.NUMBER,
            ContactsContract.CommonDataKinds.Phone._ID)

        var to = intArrayOf(android.R.id.text1, android.R.id.text2)

        var simple = SimpleCursorAdapter(this, android.R.layout.simple_list_item_2, cursor, from, to)

        listViewContacts.adapter = simple
        */
        listViewContacts.adapter = MyAdapter(this, R.layout.listview_row, contactList)

        return contactList
    }

    private fun printContactsList(contacts: MutableList<String>){

        println("index: \t name: \t number: \t\n")
        for ((index, value) in contacts.withIndex()) {
            val name = value.split(',')[0]
            val number = value.split(',')[1]
            println("$index \t $name \t $number")
        }
    }

    private fun checkPhoneNumber(txt: String): Boolean{

        if (txt.length!=13)
            return false

        for (i in 1 until txt.length){
            if (txt[i].isLetter())
                return false
        }
        return true
    }

    override fun onKeyUp(keyCode: Int, event: KeyEvent?): Boolean {

        return when(keyCode) {

            KeyEvent.KEYCODE_ENTER -> {
                println("Enter pressed")
                true
            }

            else -> return super.onKeyUp(keyCode, event)
        }
    }
}
