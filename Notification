package com.example.learningapplication

import android.content.Intent
import android.content.IntentFilter
import androidx.appcompat.app.AppCompatActivity
import android.os.Bundle
import android.os.BatteryManager
import android.view.MotionEvent
import android.widget.TextView
import androidx.core.app.NotificationCompat
import androidx.core.app.NotificationManagerCompat
import kotlinx.coroutines.*
import java.util.concurrent.Executor
import java.util.concurrent.ExecutorService
import java.util.concurrent.Executors

class MainActivity : AppCompatActivity() {

    private lateinit var tv1: TextView
    private lateinit var tv2: TextView

    private val CHANNEL_ID = "channel_id_example_01"
    private var notificationId = 100

    private var lastChargePlug: Int? = null


    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        tv1 = findViewById(R.id.textview1)
        tv2 = findViewById(R.id.textview2)

    }


    private fun sendNotification(msg: String) {
        // create notification builder
        val nBuilder = NotificationCompat.Builder(this, CHANNEL_ID)
            .setSmallIcon(R.drawable.ic_baseline_notifications_24)
            .setContentTitle("Idan's Notification")
            .setContentText("Hi, $msg")
            .setPriority(NotificationCompat.PRIORITY_DEFAULT)

        with(NotificationManagerCompat.from(this)) {
            notify(notificationId, nBuilder.build())
        }
    }


    override fun onTouchEvent(event: MotionEvent): Boolean {
        println("on touch event")

        // gets battery status
        var intentFilter = IntentFilter(Intent.ACTION_BATTERY_CHANGED)
        var batteryStatus = registerReceiver(null, intentFilter)

        // Are we charging / charged? Full or charging
        var status = batteryStatus?.getIntExtra(BatteryManager.EXTRA_LEVEL, -1)

        tv1.text = status.toString() + "%"

        val chargePlug = batteryStatus?.getIntExtra(BatteryManager.EXTRA_PLUGGED, -1)
        val usbCharge = chargePlug == BatteryManager.BATTERY_PLUGGED_USB
        val acCharge = chargePlug == BatteryManager.BATTERY_PLUGGED_AC

        when {
            usbCharge -> tv2.text = "Mobile is charging on USB"
            acCharge -> tv2.text = "Mobile is charging on AC"
            else -> tv2.text = "non plugged"
        }

        if (chargePlug != lastChargePlug)
            sendNotification(tv2.text.toString())

        lastChargePlug = chargePlug

        return super.onTouchEvent(event)
    }

}
